best practice:
- get the parameters(partition count and replication factor) right the first time!
        ~ if the partitions count increases during a topic lifecycle, it will break the keys ordering
        ~ if the replication factor increases during a topic lifecycle, you put more pressure on your cluster,
            which can lead to unexpected performance decrease (если коэффициент репликации увеличивается во время жизненного цикла темы,
            вы оказываете больше нагрузки на свой кластер, что может привести к неожиданному снижению производительности)

########################################################################################################################

PARTITIONS COUNT:
- each partition can handle a throughput of a few MB/s (nuzhno nabljudat za metricami skolko tochno)
- more partitions implies(подразумевает):
        ~ better parallelism, better throughput
        ~ ability to run more consumer in a group to scale (max as many consumers per group as partitions)
            (возможность запускать больше потребителей в группе для масштабирования
            (максимальное количество потребителей на группу, равное количеству разделов))
        ~ ability to leverage more brokers if you have a large cluster (возможность использовать больше брокеров, если у вас большой кластер)
        ~ BUT more elections to perform for Zookeeper (if using Zookeeper) (НО больше выборов для Zookeeper (при использовании Zookeeper))
        ~ BUT more files opened on Kafka

GUIDELINES:
- partition per topic
        ~ small cluster (weniger als 6 brokers) = 3 x broker count
            example: 4 broker = 12 partitions
        ~ big cluster (mehr als 12 brokers) = 2 x broker count
            example: 15 broker = 30 partitions
        ~ adjust for number of consumers you need to run in parallel at peak throughput
            (отрегулируйте количество потребителей, которые вам нужно запустить параллельно при пиковой пропускной способности)
        ~ adjust for producer throughput (increase if super-high throughput or project increase in the next 2 yars)
        ~ no topics with 1000 partitions!!!

########################################################################################################################

REPLICATION FACTOR:
- should be at least 2, usually 3, maximum 4
- the higher of replication factor (N):
        ~ better durability fo system (N-1 can fail)
        ~ better availability of system (N-min.insync.replicas if producer acks=all)
        ~ BUT more replication (higher latency if acks=all)
        ~ BUT more disk space on system (50% more if replication factor is 3 instead of 2)

GUIDELINES:
- set it to 3 to get started (must have at least 3 brokers for that)
- if replication performance is an issue, get a better broker instead of less repliation factor
        если производительность репликации является проблемой, выберите лучшего брокера вместо меньшего коэффициента репликации.
- never set it to 1 in production

########################################################################################################################

CLUSTER CUIDELINES:

- total number of partitions in the cluster:
        ~ kafka with zookeeper: max 200000 partitions (Nov 2018) -> zookeeper scaling limit
                ~ still recommended a maximum of 4000 partitions per broker (soft limit), das heißt nicht mehr als 50 broker in cluster
        ~ kafka with kraft: potentially millions of partitions
- if need more partitions in cluster, add broker instead
- if need more than 200000 partitions in cluster (it will take time to get here!), follow the Netflix model and create more kafka clusters
- overall don't need a topic with 1000 partitions to achieve high throughput. Start at a reasonable number and test the performance
        в целом не нужна тема с 1000 разделами для достижения высокой пропускной способности. Начните с разумного числа и проверьте производительность