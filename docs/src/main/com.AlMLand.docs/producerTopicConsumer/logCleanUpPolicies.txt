LOG CLEANUP POLICIES:
- policy 1: log.cleanup.policy=delete (it is kafka delete for all user topics)
    ~ delete based on age of data (default 1 week)
    ~ delete based on max size of log (default is -1==infinite)
- policy 2: log.cleanup.policy=compact (kafka default for internal topic -> __consumer_offsets)
    ~ delete based on keys of your messages
    ~ will delete old duplicate keys after the active segment is committed
    ~ infinite time and space retention

log.cleaner.backoff.ms -> the cleaner checks for work every 15 seconds

LOG CLEANUP POLICY - DELETE:
- log.retention.hours: number of hours to keep data for (default is 168 hours - one week)
    ~ higher number means more disk space
    ~ lower number means that less data is retained (if consumers are down for too long, they can miss data)
    ~ other parameters allowed: log.retention.ms, log.retention.minutes (smaller has precedence)
- log.retention.bytes:
    ~ max size in bytes for each partition (default is -1==infinite)
    ~ useful to keep the size of a log under a threshold
- use cases, two common pair of options:
    ~ one week of retention -> log.retention.hours=168 and log.retention.bytes=-1
    ~ infinite time retention bounded by 500MB (<- example) -> log.retention.ms=-1 and log.retention.bytes=524288000

LOG CLEANUP POLICY - COMPACT:
log compaction ensures that your log contains at least the last know value vor a specific key within a partition ->
the idea is that we keep only the latest "update" for a key in log. Iz wseh segmentow butet wzjato tolko samoe aktualnoe(poslednee)
znachenie dlja kazhdogo kljucha i iz nih budet sozdan nowij segment(ostalnoe stiraetsja).
    log compaction guarantees:
        ~ any consumer that is reading from tha tail of a log (most current data) will still see all the messages sent to the topic
        ~ ordering of messages it kept, log compaction only removes some messages, but does not re-order them
        ~ the offset of a message is immutable (it never changed). Offset are just skipped if a message is skipped
        ~ deleted records can still be seen by consumers for a period of delete.retention.ms (default is 24 hours)
    - log.cleanup.policy=compact is impacted by:
        ~ segments.ms (default 7 days): max amount of time to wait to close active segment
        ~ segments.bytes (default 1 GB): max size of a segment
        ~ min.compaction.lag.ms (default 0): how long to wait before a message can be compacted
        ~ delete.retention.ms (default 24 hours): wait before deleting data marked to compacting
        ~ min.cleanable.dirty.ratio (default 0.5): higher => less, more efficient cleaning. Lower => opposite.
