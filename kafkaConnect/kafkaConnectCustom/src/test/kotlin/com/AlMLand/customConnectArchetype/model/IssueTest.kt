package com.AlMLand.customConnectArchetype.model

import org.json.JSONObject
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Test
import java.time.Instant

class IssueTest {

    @Test
    fun `Issue from json is equal to expected object`() {
        val expected = Issue.Utils.Builder()
            .url("https://api.github.com/repos/kubernetes/kubernetes/issues/116952")
            .repositoryUrl("https://api.github.com/repos/kubernetes/kubernetes")
            .labelsUrl("https://api.github.com/repos/kubernetes/kubernetes/issues/116952/labels{/name}")
            .commentsUrl("https://api.github.com/repos/kubernetes/kubernetes/issues/116952/comments")
            .eventsUrl("https://api.github.com/repos/kubernetes/kubernetes/issues/116952/events")
            .htmlUrl("https://github.com/kubernetes/kubernetes/pull/116952")
            .id(1642651252)
            .nodeId("PR_kwDOAToIks5NACW9")
            .number(116952)
            .title("ktesting: add object formatter")
            .user(
                User.Utils.Builder()
                    .login("pohly")
                    .id(22076)
                    .nodeId("MDQ6VXNlcjIyMDc2")
                    .avatarUrl("https://avatars.githubusercontent.com/u/22076?v=4")
                    .gravatarId("")
                    .url("https://api.github.com/users/pohly")
                    .htmlUrl("https://github.com/pohly")
                    .followersUrl("https://api.github.com/users/pohly/followers")
                    .followingUrl("https://api.github.com/users/pohly/following{/other_user}")
                    .gistsUrl("https://api.github.com/users/pohly/gists{/gist_id}")
                    .starredUrl("https://api.github.com/users/pohly/starred{/owner}{/repo}")
                    .subscriptionsUrl("https://api.github.com/users/pohly/subscriptions")
                    .organizationsUrl("https://api.github.com/users/pohly/orgs")
                    .reposUrl("https://api.github.com/users/pohly/repos")
                    .eventsUrl("https://api.github.com/users/pohly/events{/privacy}")
                    .receivedEventsUrl("https://api.github.com/users/pohly/received_events")
                    .type("User")
                    .siteAdmin(false)
                    .build()
            )
            .labels(
                listOf(
                    Label.Utils.Builder()
                        .id(253450934)
                        .nodeId("MDU6TGFiZWwyNTM0NTA5MzQ=")
                        .url("https://api.github.com/repos/kubernetes/kubernetes/labels/size/M")
                        .name("size/M")
                        .color("eebb00")
                        .default(false)
                        .description("Denotes a PR that changes 30-99 lines, ignoring generated files.")
                        .build(),
                    Label.Utils.Builder()
                        .id(267761362)
                        .nodeId("MDU6TGFiZWwyNjc3NjEzNjI=")
                        .url("https://api.github.com/repos/kubernetes/kubernetes/labels/kind/feature")
                        .name("kind/feature")
                        .color("c7def8")
                        .default(false)
                        .description("Categorizes issue or PR as related to a new feature.")
                        .build(),
                    Label.Utils.Builder()
                        .id(349530249)
                        .nodeId("MDU6TGFiZWwzNDk1MzAyNDk=")
                        .url("https://api.github.com/repos/kubernetes/kubernetes/labels/release-note-none")
                        .name("release-note-none")
                        .color("c2e0c6")
                        .default(false)
                        .description("Denotes a PR that doesn't merit a release note.")
                        .build(),
                    Label.Utils.Builder()
                        .id(477397086)
                        .nodeId("MDU6TGFiZWw0NzczOTcwODY=")
                        .url("https://api.github.com/repos/kubernetes/kubernetes/labels/cncf-cla:%20yes")
                        .name("cncf-cla: yes")
                        .color("bfe5bf")
                        .default(false)
                        .description("Indicates the PR's author has signed the CNCF CLA.")
                        .build(),
                    Label.Utils.Builder()
                        .id(1111992057)
                        .nodeId("MDU6TGFiZWwxMTExOTkyMDU3")
                        .url("https://api.github.com/repos/kubernetes/kubernetes/labels/needs-priority")
                        .name("needs-priority")
                        .color("ededed")
                        .default(false)
                        .description("Indicates a PR lacks a `priority/foo` label and requires one.")
                        .build(),
                    Label.Utils.Builder()
                        .id(2389815605)
                        .nodeId("MDU6TGFiZWwyMzg5ODE1NjA1")
                        .url("https://api.github.com/repos/kubernetes/kubernetes/labels/needs-triage")
                        .name("needs-triage")
                        .color("ededed")
                        .default(false)
                        .description("Indicates an issue or PR lacks a `triage/foo` label and requires one.")
                        .build(),
                    Label.Utils.Builder()
                        .id(2480789133)
                        .nodeId("MDU6TGFiZWwyNDgwNzg5MTMz")
                        .url("https://api.github.com/repos/kubernetes/kubernetes/labels/do-not-merge/needs-sig")
                        .name("do-not-merge/needs-sig")
                        .color("e11d21")
                        .default(false)
                        .description("Indicates an issue or PR lacks a `sig/foo` label and requires one.")
                        .build()
                )
            )
            .state("open")
            .locked(false)
            .assignee(null)
            .assignees(listOf())
            .milestone(null)
            .comments(2)
            .createdAt(Instant.parse("2023-03-27T19:02:16Z"))
            .updatedAt(Instant.parse("2023-03-27T19:04:55Z"))
            .closedAt(null)
            .authorAssociation("CONTRIBUTOR")
            .activeLockReason(null)
            .draft(false)
            .pullRequest(
                PullRequest.Utils.Builder()
                    .url("https://api.github.com/repos/kubernetes/kubernetes/pulls/116952")
                    .htmlUrl("https://github.com/kubernetes/kubernetes/pull/116952")
                    .diffUrl("https://github.com/kubernetes/kubernetes/pull/116952.diff")
                    .patchUrl("https://github.com/kubernetes/kubernetes/pull/116952.patch")
                    .mergedAt(null)
                    .build()
            )
            .body("#### What type of PR is this?\r\n\r\n/kind feature\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis is useful for logging types which implement String incorrectly, for example by inheriting it from metav1.TypeMeta. If implementing fmt.Stringer and logr.Marshaler for the type is not possible or not desirable, then log calls can wrap an instance of the type or a pointer to it with Format. That then returns a wrapper which implements both.\r\n\r\nYAML formatting is used for pretty-printing to a multi-line string.\r\n\r\n#### Which issue(s) this PR fixes:\r\nRelated-to: https://github.com/kubernetes/kubernetes/pull/115950\r\n\r\n#### Special notes for your reviewer:\r\n\r\n#### Does this PR introduce a user-facing change?\r\n```release-note\r\nNONE\r\n```\r\n\r\n/cc @SataQiu @liggitt ")
            .reactions(
                Reactions.Utils.Builder()
                    .url("https://api.github.com/repos/kubernetes/kubernetes/issues/116952/reactions")
                    .totalCount(0)
                    .plusOne(0)
                    .minusOne(0)
                    .laugh(0)
                    .hooray(0)
                    .confused(0)
                    .heart(0)
                    .rocket(0)
                    .eyes(0)
                    .build()
            )
            .timelineUrl("https://api.github.com/repos/kubernetes/kubernetes/issues/116952/timeline")
            .performedViaGithubApp(null)
            .stateReason(null)
            .build()

        val actual = Issue.issueFromJson(JSONObject(gitHubIssueJson))

        assertEquals(expected.url, actual.url)
        assertEquals(expected.repositoryUrl, actual.repositoryUrl)
        assertEquals(expected.labelsUrl, actual.labelsUrl)
        assertEquals(expected.commentsUrl, actual.commentsUrl)
        assertEquals(expected.eventsUrl, actual.eventsUrl)
        assertEquals(expected.htmlUrl, actual.htmlUrl)
        assertEquals(expected.id, actual.id)
        assertEquals(expected.nodeId, actual.nodeId)
        assertEquals(expected.number, actual.number)
        assertEquals(expected.title, actual.title)
        assertEquals(expected.user?.login, actual.user?.login)
        assertEquals(expected.user?.id, actual.user?.id)
        assertEquals(expected.user?.nodeId, actual.user?.nodeId)
        assertEquals(expected.user?.avatarUrl, actual.user?.avatarUrl)
        assertEquals(expected.user?.gravatarId, actual.user?.gravatarId)
        assertEquals(expected.user?.url, actual.user?.url)
        assertEquals(expected.user?.htmlUrl, actual.user?.htmlUrl)
        assertEquals(expected.user?.followersUrl, actual.user?.followersUrl)
        assertEquals(expected.user?.followingUrl, actual.user?.followingUrl)
        assertEquals(expected.user?.gistsUrl, actual.user?.gistsUrl)
        assertEquals(expected.user?.starredUrl, actual.user?.starredUrl)
        assertEquals(expected.user?.subscriptionsUrl, actual.user?.subscriptionsUrl)
        assertEquals(expected.user?.organizationsUrl, actual.user?.organizationsUrl)
        assertEquals(expected.user?.reposUrl, actual.user?.reposUrl)
        assertEquals(expected.user?.eventsUrl, actual.user?.eventsUrl)
        assertEquals(expected.user?.receivedEventsUrl, actual.user?.receivedEventsUrl)
        assertEquals(expected.user?.type, actual.user?.type)
        assertEquals(expected.user?.siteAdmin, actual.user?.siteAdmin)
        assertEquals(expected.labels?.size, actual.labels?.size)
        assertEquals(expected.state, actual.state)
        assertEquals(expected.locked, actual.locked)
        assertEquals(expected.assignee, actual.assignee)
        assertEquals(expected.assignees, actual.assignees)
        assertEquals(expected.milestone, actual.milestone)
        assertEquals(expected.comments, actual.comments)
        assertEquals(expected.createdAt, actual.createdAt)
        assertEquals(expected.updatedAt, actual.updatedAt)
        assertEquals(expected.closedAt, actual.closedAt)
        assertEquals(expected.authorAssociation, actual.authorAssociation)
        assertEquals(expected.activeLockReason, actual.activeLockReason)
        assertEquals(expected.draft, actual.draft)
        assertEquals(expected.pullRequest?.url, actual.pullRequest?.url)
        assertEquals(expected.pullRequest?.htmlUrl, actual.pullRequest?.htmlUrl)
        assertEquals(expected.pullRequest?.diffUrl, actual.pullRequest?.diffUrl)
        assertEquals(expected.pullRequest?.patchUrl, actual.pullRequest?.patchUrl)
        assertEquals(expected.pullRequest?.mergedAt, actual.pullRequest?.mergedAt)
        assertEquals(expected.body, actual.body)
        assertEquals(expected.reactions?.url, actual.reactions?.url)
        assertEquals(expected.reactions?.totalCount, actual.reactions?.totalCount)
        assertEquals(expected.reactions?.plusOne, actual.reactions?.plusOne)
        assertEquals(expected.reactions?.minusOne, actual.reactions?.minusOne)
        assertEquals(expected.reactions?.laugh, actual.reactions?.laugh)
        assertEquals(expected.reactions?.hooray, actual.reactions?.hooray)
        assertEquals(expected.reactions?.confused, actual.reactions?.confused)
        assertEquals(expected.reactions?.heart, actual.reactions?.heart)
        assertEquals(expected.reactions?.rocket, actual.reactions?.rocket)
        assertEquals(expected.reactions?.eyes, actual.reactions?.eyes)
        assertEquals(expected.timelineUrl, actual.timelineUrl)
        assertEquals(expected.performedViaGithubApp, actual.performedViaGithubApp)
        assertEquals(expected.stateReason, actual.stateReason)
    }
}